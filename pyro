#!/usr/bin/python
#  pyro.py
#  
#  Dustin Dorroh <dustin.dorroh@decisionsciencescorp.com>
#  
import os
import logging.handlers
from ConfigParser import SafeConfigParser
from shutil import copyfile
from glob import glob
import errno
import string

def main():

	# Set config file
	local_config = os.path.join(os.environ['HOME'],'.pyrorc')
	global_config = '/etc/pyrorc'
	
	if os.path.isfile(local_config):
		CONFIG_FILE = local_config
	elif os.path.isfile(global_config):
		CONFIG_FILE = global_config
	else:
		msg = 'No config file located in {local_config} or {global_config}'.format(local_config=local_config,global_config=global_config)
		raise OSError(errno.ENOENT,msg)


	parser = SafeConfigParser()
	parser.read(CONFIG_FILE)

	rotated_logger = logging.getLogger('pyroLogger')

	# Setup handlers
	for section_name in parser.sections():
		# Check if file exists
		file_path = string.Template(parser.get(section_name, 'file')).substitute(**os.environ)
		if os.path.exists(file_path):
			# Backup file
			copyfile(file_path, file_path + '~')
			# Create handler
			backupCount = int(parser.get(section_name,'backupCount'))
			handler = logging.handlers.TimedRotatingFileHandler(file_path, when='S', backupCount=backupCount)
			# Add handler to logger
			rotated_logger.addHandler(handler)
		else:
			print "Skipping %s. File does not Exist" % file_path

	# Roll files over
	for handler in rotated_logger.handlers:
		handler.doRollover()

	# Copy backups back to original file because doRollover() clears the file
	for section_name in parser.sections():
		file_path = string.Template(parser.get(section_name, 'file')).substitute(**os.environ)
		# Check if file exists
		if os.path.exists(file_path):
			copyfile(file_path+'~',file_path)

	for section_name in parser.sections():
		file_path = string.Template(parser.get(section_name, 'file')).substitute(**os.environ)
		# See what files are created
		if os.path.exists(file_path):
			logfiles = sorted(glob('%s.????-??-??_??-??-??' % file_path))
			for filename in logfiles:
				print filename

if __name__ == "__main__":
	main()
